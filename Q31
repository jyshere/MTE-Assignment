31. Use a deque to find the maximum in every sliding window of size K. Write its 
algorithm, program. Find its time and space complexities. Explain with suitable 
example. 

Algorithm:
Use a deque (double-ended queue) to store indices of array elements.
The deque will always store indices in decreasing order of their corresponding array values.
For every new element: Remove indices from the back while the element at those indices is smaller than the current element.
Push the current index to the back.
Remove the index from the front if it's out of the current window.
The front of the deque contains the maximum for the current window.

Program:-
vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    deque<int> dq;
    vector<int> result;

    for (int i = 0; i < nums.size(); i++) {
        if (!dq.empty() && dq.front() == i - k)
            dq.pop_front();

        while (!dq.empty() && nums[dq.back()] < nums[i])
            dq.pop_back();

        dq.push_back(i);

        if (i >= k - 1)
            result.push_back(nums[dq.front()]);
    }

    return result;
}

Time Complexity: O(n)
Space Complexity: O(k)

21. How to count the number of 1s in the binary representation of numbers from 0 to n. 
Write its algorithm, program. Find its time and space complexities. Explain with 
suitable example. 

Approach: Brute Force Approach:

Loop through each number from 0 to n.
For each number, convert it to binary and count the 1s.
This approach is simple but can be inefficient for large n.
Efficient Approach Using Brian Kernighan's Algorithm:
This algorithm allows counting the number of 1s in the binary representation of a number in an efficient way.
For each number, repeatedly clear the rightmost 1-bit using n = n & (n - 1) and count how many times this operation is performed until n becomes 0.
This approach is more efficient than converting the number to binary and counting the 1s.

Algorithm: Brute Force:
Initialize a counter total_count to 0.
Loop through each number from 0 to n:
Convert the number to binary.
Count the number of 1s in the binary representation.
Add the count to total_count.
Return total_count.

Efficient Approach:
Initialize a counter total_count to 0.
Loop through each number from 0 to n:
Count the number of 1s in the current number using the n = n & (n - 1) trick.
Add the count to total_count.
Return total_count.

Program:-
int countSetBits(int n) {
    int count = 0;
    while (n) {
        n = n & (n - 1);
        count++;
    }
    return count;
}


int countTotalSetBits(int n) {
    int total_count = 0;
    for (int i = 0; i <= n; i++) {
        total_count += countSetBits(i);
    }
    return total_count;
}

Time complexity:- O(n * log(n))
Space Complexity: O(1)

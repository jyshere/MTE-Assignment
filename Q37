37. Find all unique combinations of numbers that sum to a target. Write its algorithm, 
program. Find its time and space complexities. Explain with suitable example. 

Algorithm:-
Sort the input array (optional, but useful for optimization).
Start backtracking:At each step, either pick the current element or move to next.
If target == 0, save the current combination.
If target < 0, backtrack.
Avoid picking numbers that overshoot the target.

Program:-
void backtrack(vector<int>& candidates, int target, vector<vector<int>>& result, vector<int>& combination, int index) {
    if (target == 0) {
        result.push_back(combination);
        return;
    }
    if (target < 0) return;

    for (int i = index; i < candidates.size(); i++) {
        combination.push_back(candidates[i]);
        backtrack(candidates, target - candidates[i], result, combination, i); // not i + 1 because we can reuse same element
        combination.pop_back();
    }
}
vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    vector<vector<int>> result;
    vector<int> combination;
    backtrack(candidates, target, result, combination, 0);
    return result;
}

Time Complexity:
O(2^target)
Space Complexity:
O(target)

Example:-
Input: [2,3,6,7], target = 7
Possible combinations:
[2,2,3] (2+2+3 = 7)
[7] (7 = 7)
So, output is [[2,2,3], [7]]

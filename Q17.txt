*Q.Calculate how much water can be trapped between the bars of a histogram. Write its 
algorithm, program. Find its time and space complexities. Explain with suitable 
example.*


Code:- //Done on LeetCode
class Solution {
    public int trap(int[] height) {
        int n = height.length;
        if (n == 0) return 0;

        int left = 0, right = n - 1;
        int left_max = 0, right_max = 0;
        int waterTrapped = 0;

        while (left <= right) {
            if (height[left] <= height[right]) {
                if (height[left] >= left_max) {
                    left_max = height[left];
                } else {
                    waterTrapped += left_max - height[left];
                }
                left++;
            } else {
                if (height[right] >= right_max) {
                    right_max = height[right];
                } else {
                    waterTrapped += right_max - height[right];
                }
                right--;
            }
        }

        return waterTrapped;
    }
}



Algorithm:-

Two-pointer approach:

Use two pointers, left and right, that start at the two ends of the array.

Keep track of the maximum height encountered so far from both the left and right sides (left_max and right_max).

Calculate the trapped water based on the minimum of the left_max and right_max at each step.

Steps:

Initialize left = 0 and right = n - 1 (where n is the length of the array).

Initialize left_max = 0 and right_max = 0, and a variable waterTrapped = 0.

Traverse the histogram using the two pointers:

If height[left] is smaller than height[right], check if height[left] is greater than or equal to left_max:

If it is, update left_max. Otherwise, calculate the water trapped at this index as left_max - height[left] and add it to waterTrapped.

Move the left pointer to the right (left++).

Otherwise, check if height[right] is greater than or equal to right_max:

If it is, update right_max. Otherwise, calculate the water trapped at this index as right_max - height[right] and add it to waterTrapped.

Move the right pointer to the left (right--).

End condition: The loop stops when the left pointer surpasses the right pointer.


Complexities:-
TC:-O(n)
SC:-O(1)  

Examples:- 
height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6


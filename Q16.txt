*Q.Find the majority element in an array that appears more than n/2 times. Write its 
algorithm, program. Find its time and space complexities. Explain with suitable 
example. *

Code:- //Done on LeetCode
class Solution {
    public int majorityElement(int[] nums) {
        int candidate = nums[0];
        int count = 1;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == candidate) {
                count++;
            } else {
                count--;
                if (count == 0) {
                    candidate = nums[i];
                    count = 1;
                }
            }
        }
        return candidate;
    }
}



Algorithm:-
Initialize a variable candidate to store the potential majority element and a variable count to store the count of the current candidate.

Traverse the array:

If count is 0, set the current element as the new candidate and set count to 1.

If the current element is the same as the candidate, increment count.

If the current element is different from the candidate, decrement count.

Return the candidate as the majority element. We assume the input always has a majority element.




Complexities:-
TC:-O(n)
SC:-O(1)  

Examples:- 
[3,2,3]
Output: 3

35. Find the k-most frequent elements in an array using a priority queue. Write its 
algorithm, program. Find its time and space complexities. Explain with suitable 
example. 

Algorithm:
Count the frequency of each element using a hashmap.
Use a min-heap (priority queue) to keep track of the top k frequent elements.
Push pairs (frequency, element) into the heap.
If heap size > k, pop the element with the smallest frequency.
Extract elements from the heap to get the answer.

Program:-
vector<int> topKFrequent(vector<int>& nums, int k) {
    unordered_map<int, int> freq;
    for (int num : nums) {
        freq[num]++;
    }

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> minHeap;

    for (auto& [num, count] : freq) {
        minHeap.push({count, num});
        if (minHeap.size() > k) {
            minHeap.pop();
        }
    }

    vector<int> result;
    while (!minHeap.empty()) {
        result.push_back(minHeap.top().second);
        minHeap.pop();
    }

    return result;
}

Time Complexity:  O(n + m log k)
Space Complexity:
Frequency map: O(m)
Heap: O(k)

*Q.. Find two numbers in a sorted array that add up to a target. Write its algorithm, program. 
Find its time and space complexities. Explain with suitable example. *

Code:- //Done on LeetCode
class Solution {
    public int[] twoSum(int[] arr, int target) {
        int l=0;
        int r=arr.length-1;

        while(l<r){
          int sum = arr[l]+arr[r];
          if(sum==target){
            return new int[]{l+1,r+1};
          }
          else if(sum<target){
            l++;
          }
          else{
            r--;
          }
        }

        return new int []{-1,-1};
    }
}

Algorithm:-
Initialize two pointers:

left = 0 (start of array)

right = n - 1 (end of array)

While left < right:

Calculate sum = arr[left] + arr[right]

If sum == target: return the indices

If sum < target: move left++ (need bigger number)

If sum > target: move right-- (need smaller number)


Complexities:-
TC:-O(n)
SC:-O(1)  

Examples:- 
[2,7,11,15], target = 9
[1,2]
The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2]

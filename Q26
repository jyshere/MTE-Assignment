26. Remove the n-th node from the end of a singly linked list. Write its algorithm, program. 
Find its time and space complexities. Explain with suitable example. 

Algorithm (Two Pointer Approach):
Initialize fast and slow pointers to the head of the linked list.
Move the fast pointer n steps ahead.
Move both pointers (fast and slow) one step at a time until fast reaches the end of the list.
Now, the slow pointer is at the node just before the n-th node from the end.
Adjust the next pointer of the slow node to skip the n-th node, effectively removing it.
Return the updated head of the list.

ListNode* removeNthFromEnd(ListNode* head, int n) {
    ListNode* dummy = new ListNode(0);
    dummy->next = head;
    
    ListNode* fast = dummy;
    ListNode* slow = dummy;

    for (int i = 0; i <= n; i++) {
        fast = fast->next;
    }

    while (fast != nullptr) {
        fast = fast->next;
        slow = slow->next;
    }

    slow->next = slow->next->next;

    return dummy->next;
}

Time Complexity: O(n)
Space Complexity: O(1) 

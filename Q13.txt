*Q. How to merge two sorted linked lists into one sorted list. Write its algorithm, program. 
Find its time and space complexities. Explain with suitable example.*


Code:- //Done on Leet code

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode();
        ListNode tail=dummy;
        while(list1!=null && list2!=null){
          if(list1.val<list2.val){
            tail.next=list1;
            list1=list1.next;
          }
          else{
            tail.next=list2;
            list2=list2.next;
          }
          tail=tail.next;
        }

        if(list1!=null) tail.next=list1;
        if(list2!=null) tail.next=list2;

        return dummy.next;
    }
}

Algorithm:-
Create a dummy node as the start of the new merged list.

Use a pointer tail to track the end of the merged list.

Compare the values of the current nodes of both lists.

Append the smaller node to tail.next.

Move the pointer of the list from which the node was taken.

When one list is exhausted, point tail.next to the remaining part of the other list.

Return dummy.next (the head of the merged list).


Complexities:-
TC:-O(n+m)
SC:-O(1)  

Examples:- 
list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]


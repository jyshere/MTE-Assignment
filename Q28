Q28. Implement two stacks in a single array. Write its algorithm, program. Find its time and 
space complexities. Explain with suitable example.

Algorithm:-
Initialization:
top1 = -1
top2 = size (end of array)
Push1(x):
If top1 + 1 < top2, then push to stack1:
top1++
arr[top1] = x
Else, stack overflow
Push2(x):If top1 < top2 - 1, then push to stack2:
top2--
arr[top2] = x
Else, stack overflow
Pop1():If top1 >= 0, return arr[top1--]
Else, stack underflow
Pop2():If top2 < size, return arr[top2++]
Else, stack underflow

Program:-
    void push1(int x) {
        if (top1 + 1 < top2) {
            arr[++top1] = x;
        } else {
            cout << "Stack Overflow on Stack 1\n";
        }
    }

    void push2(int x) {
        if (top1 < top2 - 1) {
            arr[--top2] = x;
        } else {
            cout << "Stack Overflow on Stack 2\n";
        }
    }
    int pop1() {
        if (top1 >= 0) {
            return arr[top1--];
        } else {
            cout << "Stack Underflow on Stack 1\n";
            return -1;
        }
    }

    int pop2() {
        if (top2 < size) {
            return arr[top2++];
        } else {
            cout << "Stack Underflow on Stack 2\n";
            return -1;
        }
    }

  
    ~TwoStacks() {
        delete[] arr;
    }


Time Complexity: O(1)
Space Complexity : O(n)

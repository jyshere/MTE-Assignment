49. How to find the intersection of two linked lists. Write its algorithm, program. Find its 
time and space complexities. Explain with suitable example. 

Algorithm (Optimal - Two Pointers Method):
Initialize two pointers p1 and p2 at the heads of the two lists.

Traverse through the lists:

Move p1 one step at a time, and p2 one step at a time.

When p1 reaches the end of list 1, redirect it to the head of list 2.

When p2 reaches the end of list 2, redirect it to the head of list 1.

If there is an intersection, p1 and p2 will eventually meet at the intersection node.

If no intersection, both will eventually become NULL

Program:-
ListNode* getIntersectionNode(ListNode* headA, ListNode* headB) {
    if (!headA || !headB) return NULL;

    ListNode* p1 = headA;
    ListNode* p2 = headB;

    while (p1 != p2) {
        p1 = (p1 == NULL) ? headB : p1->next;
        p2 = (p2 == NULL) ? headA : p2->next;
    }
    
    return p1;
}
Time Complexity	O(m + n) 
Space Complexity	O(1) 

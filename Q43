43. Solve the problem of finding the top K frequent elements in an array. Write its 
algorithm, program. Find its time and space complexities. Explain with suitable 
example. 

Algorithm
Count Frequency:

Use a hash map (unordered_map) to store the frequency of each element in the array.

Use a Priority Queue:

Use a min-heap (priority queue) to keep track of the top K frequent elements.

If the heap exceeds size K, remove the element with the smallest frequency.

Extract the Top K Elements:

After processing all elements, the heap will contain the top K frequent elements.

Program:-
vector<int> topKFrequent(vector<int>& nums, int k) {
    unordered_map<int, int> freqMap;
    
    for (int num : nums) {
        freqMap[num]++;
    }
   
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> minHeap;
    
    for (auto& entry : freqMap) {
        minHeap.push({entry.second, entry.first});
        
        if (minHeap.size() > k) {
            minHeap.pop();
        }
    }
    
  
    vector<int> result;
    while (!minHeap.empty()) {
        result.push_back(minHeap.top().second);
        minHeap.pop();
    }
  
    reverse(result.begin(), result.end());
    return result;
}


Explanation of the Code:
Frequency Map: We use unordered_map<int, int> to count the frequency of each element in the array.

Min-Heap: We use priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> to maintain a heap that stores pairs of frequency and element. The greater comparator ensures that the heap is a min-heap based on the frequency.

Heap Maintenance: We push elements into the heap and if the heap size exceeds K, we pop the element with the smallest frequency to maintain the top K frequent elements.

Result Extraction: Once we have processed all elements, the heap contains the K most frequent elements. We then extract the elements and reverse them to return the result in correct order.

Time Complexity:
O(n log k) 
Space Complexity:
O(n + k)

Example:
Input:
nums = [1, 1, 1, 2, 2, 3], k = 2

Step 1: Frequency Map
The frequency map is:
{1: 3, 2: 2, 3: 1}

Step 2: Min-Heap
We insert elements into the heap:

Insert (3, 1) → Heap: [(3, 1)]

Insert (2, 2) → Heap: [(2, 2), (3, 1)]

Insert (1, 3) → Heap: [(1, 3), (3, 1), (2, 2)] → Pop (1, 3) to maintain heap size of 2 → Heap: [(2, 2), (3, 1)]

Step 3: Extract Elements
The heap contains the top 2 frequent elements:
[(2, 2), (3, 1)]

Step 4: Result
Extract elements from the heap:
Result: [2, 1]

Output:
[1, 2] (The top 2 frequent elements are 1 and 2).
